AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Assign3 Demo
Parameters:
  FrontGitHubRepo:
    Type: String
  LambdaGitHubRepo:
    Type: String
  GitHubBranch:
    Type: String
  GitHubToken:
    Type: String
  GitHubUser:
    Type: String

Resources:
  # Create a REST API
  API:
    DependsOn:
      - Lambda 
      - Lambda2
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: TestApi
      EndpointConfiguration:
        Types:
          - REGIONAL
  
  # Create a resource
  Search:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      # For resources without a parent, 
      # specify the RestApi root resource ID
      ParentId: !GetAtt
        - API
        - RootResourceId
      # create endpoint/search
      PathPart: search

  # Create a GET method for search.
  MethodSearch:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref Search
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      # You would need to modifiy below
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: ''

        IntegrationHttpMethod: POST

        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:186209955484:function:assign3GenLF2/invocations
      
  # Create a resource
  Upload:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      # For resources without a parent, 
      # specify the RestApi root resource ID
      ParentId: !GetAtt
        - API
        - RootResourceId
      # Create endpoint/upload
      PathPart: '{folder}'
  
  # Create a child resource
  File:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref Upload 
      
      # Create endpoint/upload/{file-name}   // {} means a variable
      PathPart: '{item}'


  # Create a PUT method for upload.
  MethodUploadBucketFile:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref File
      HttpMethod: PUT
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      # You would need to modifiy below
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: ''

        Credentials: arn:aws:iam::186209955484:role/S3_Admin_Access
        IntegrationHttpMethod: PUT
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{key}



  Deployment:
    # Useful if there are any dependencies. We can enforce order of executions
    DependsOn: 
      - MethodSearch
      - MethodUploadBucketFile
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref API
      Description: COMS-6998 Cloud Formation APIGateway Example by Hyun
      StageName: v1

  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          REGION: us-east-1
      CodeUri: 
        Bucket: assign3lambda
        Key: function/Assign3-LF1.zip  
      Description: Lambda function for FrontEnd 
      MemorySize: 128   

      Handler: lambda_function.lambda_handler
      Role: arn:aws:iam::186209955484:role/service-role/Assign3-LF1-role-kbq87fa8
      Timeout: 30
      Runtime: python3.8
      FunctionName: assign3GenLF1

  Lambda2:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          REGION: us-east-1
      CodeUri: 
        Bucket: assign3lambda
        Key: function/Assign3-LF2.zip 
      Description: Lambda function for CD Demo  
      MemorySize: 128   

      Handler: lambda_function.lambda_handler
      Role: arn:aws:iam::186209955484:role/service-role/Assign3-LF2-role-6c6jgmou
      Timeout: 30
      Runtime: python3.8
      FunctionName: assign3GenLF2
